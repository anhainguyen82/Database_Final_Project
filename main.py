#!flask/bin/python
from flask import Flask, jsonify, request
from os import listdir
from pymongo import MongoClient
from bs4 import BeautifulSoup
import json
import csv
import datetime

app = Flask(__name__)


@app.route('/')
def index():
    return "This is a sample rest service"


# rest service to upload json files within a given directory.
@app.route('/upload', methods=['GET'])
def uploadJSON():
    # Get path from query string
    path = request.args.get('path')

    if not path.endswith('/'):
        path = path + "/"

    # empty list to store all json files in directory
    files = []
    hotels = 0
    reviews = 0

    # save the names of all the json files in the directory saved to the path variable above
    for f in listdir(path):
        if f.endswith('.json'):
            files.append(f)

    # iterate through each json file
    for f in files:

        with open(path + f, 'rb') as hotel:
            # extract json into filedata dictionary
            summary = uploadreview(hotel)
            data = json.loads(summary.data)
            hotels += data["Hotels Uploaded"]
            reviews += data["Reviews Uploaded"]



    return jsonify({"Upload Time": datetime.datetime.now().strftime("%c"),
                    "Working directory": path,
                    "Hotels Uploaded":hotels,
                    "Reviews Uploaded":reviews})


# rest service to upload a single hotel review and write the review and hotel logs
@app.route('/uploadReview/<data>', methods=['GET'])
def uploadreview(data):

    thing = data
    # Mongo is the chosen database, make sure your MongoDB is running before execution of this program
    client = MongoClient()

    # get current date and time
    currenttime = datetime.datetime.now()

    # database name is "HotelReviews"
    db = client.HotelReviews
    filedata = json.load(data)

    # logs of uploaded collections
    reviewslog = [[currenttime.strftime("%c")], ["HotelID", "ReviewID", "Upload Status"]]
    hotelslog = [[currenttime.strftime("%c")], ["HotelID", "Upload Status"]]

    # "Hotel" collection to hold all hotel's data
    collection = db.Hotel

    try:
        # extract plain text from "Address"'s xml format
        if "Address" in filedata["HotelInfo"]:
            x = BeautifulSoup(filedata["HotelInfo"]["Address"]).get_text().strip()
            filedata["HotelInfo"].update({"Address": x})

        # add data to collection
        collection.insert_one(filedata["HotelInfo"])

        # mark upload as "Success"
        hotelslog.append([filedata["HotelInfo"]["HotelID"], "Success"])
    except Exception as e:
        # mark unsuccessful upload with error message generated by the system
        hotelslog.append([filedata["HotelInfo"]["HotelID"], e])

    # "Reviews" collection to hold all users' reviews data
    collection = db.Reviews

    # iterate through each review
    for doc in filedata["Reviews"]:

        # add "HotelID" to each review for reference
        doc.update({'HotelID': filedata["HotelInfo"]["HotelID"]})

        # parse out key and value pairs inside each review
        for key, value in doc.items():

            # check for nested documents
            if isinstance(value, dict):
                for key in sorted(value):
                    # replace "." inside keys with blank to avoid error
                    value[key.replace(".", "")] = value.pop(key)
            else:
                # remove unicode characters within texts
                value = value.encode('ascii', 'ignore').decode('unicode_escape')
                doc.update({key: value})
        try:
            # add data to collection
            collection.insert_one(doc)

            # mark upload as "Success"
            reviewslog.append([doc["HotelID"], doc["ReviewID"], "Success"])
        except Exception as e:
            # mark unsuccessful upload with error message generated by the system
            reviewslog.append([doc["HotelID"], doc["ReviewID"], e])


    writereviewslog(reviewslog)
    writehotelslog(hotelslog)

    return jsonify({"Upload Time": currenttime.strftime("%c"),
                    "Hotels Uploaded": len(hotelslog) - 2,
                    "Reviews Uploaded": len(reviewslog) - 2})


# Jodi your rest service goes here.
# Check out the functions written and see if you can write a new one to query the information we have uploaded in the code above.


def writereviewslog(reviewslog):
    # write logs to csv files, logs will write to directory in which this app is located in
    out = open('ReviewsUploadLog.csv', 'w', newline='')
    for item in reviewslog:
        csv.writer(out).writerow(item)
    out.close()


def writehotelslog(hotelslog):
    out = open('HotelsUploadLog.csv', 'w', newline='')
    for item in hotelslog:
        csv.writer(out).writerow(item)
    out.close()


# Starts the server for serving Rest Ser.vices
if __name__ == '__main__':
    app.run(debug=True)